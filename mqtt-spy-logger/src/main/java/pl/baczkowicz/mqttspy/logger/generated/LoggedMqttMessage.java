//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.10.26 at 11:57:18 PM GMT 
//


package pl.baczkowicz.mqttspy.logger.generated;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Copyable;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.builder.CopyBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBCopyBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBEqualsBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBHashCodeBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBToStringBuilder;
import pl.baczkowicz.mqttspy.common.generated.MqttMessage;


/**
 * <p>Java class for LoggedMqttMessage complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="LoggedMqttMessage">
 *   &lt;complexContent>
 *     &lt;extension base="{http://baczkowicz.pl/mqtt-spy/common}MqttMessage">
 *       &lt;sequence>
 *         &lt;element name="ID" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="Timestamp" type="{http://www.w3.org/2001/XMLSchema}long"/>
 *         &lt;element name="Source" type="{http://baczkowicz.pl/mqtt-spy/logger}Source"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "LoggedMqttMessage", propOrder = {
    "id",
    "timestamp",
    "source"
})
public class LoggedMqttMessage
    extends MqttMessage
    implements CopyTo, Copyable, Equals, HashCode, ToString
{

    @XmlElement(name = "ID")
    protected int id;
    @XmlElement(name = "Timestamp")
    protected long timestamp;
    @XmlElement(name = "Source", required = true)
    protected Source source;

    /**
     * Gets the value of the id property.
     * 
     */
    public int getID() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     */
    public void setID(int value) {
        this.id = value;
    }

    /**
     * Gets the value of the timestamp property.
     * 
     */
    public long getTimestamp() {
        return timestamp;
    }

    /**
     * Sets the value of the timestamp property.
     * 
     */
    public void setTimestamp(long value) {
        this.timestamp = value;
    }

    /**
     * Gets the value of the source property.
     * 
     * @return
     *     possible object is
     *     {@link Source }
     *     
     */
    public Source getSource() {
        return source;
    }

    /**
     * Sets the value of the source property.
     * 
     * @param value
     *     allowed object is
     *     {@link Source }
     *     
     */
    public void setSource(Source value) {
        this.source = value;
    }

    public void toString(ToStringBuilder toStringBuilder) {
        super.toString(toStringBuilder);
        {
            int theID;
            theID = this.getID();
            toStringBuilder.append("id", theID);
        }
        {
            long theTimestamp;
            theTimestamp = this.getTimestamp();
            toStringBuilder.append("timestamp", theTimestamp);
        }
        {
            Source theSource;
            theSource = this.getSource();
            toStringBuilder.append("source", theSource);
        }
    }

    public String toString() {
        final ToStringBuilder toStringBuilder = new JAXBToStringBuilder(this);
        toString(toStringBuilder);
        return toStringBuilder.toString();
    }

    public void equals(Object object, EqualsBuilder equalsBuilder) {
        if (!(object instanceof LoggedMqttMessage)) {
            equalsBuilder.appendSuper(false);
            return ;
        }
        if (this == object) {
            return ;
        }
        super.equals(object, equalsBuilder);
        final LoggedMqttMessage that = ((LoggedMqttMessage) object);
        equalsBuilder.append(this.getID(), that.getID());
        equalsBuilder.append(this.getTimestamp(), that.getTimestamp());
        equalsBuilder.append(this.getSource(), that.getSource());
    }

    public boolean equals(Object object) {
        if (!(object instanceof LoggedMqttMessage)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final EqualsBuilder equalsBuilder = new JAXBEqualsBuilder();
        equals(object, equalsBuilder);
        return equalsBuilder.isEquals();
    }

    public void hashCode(HashCodeBuilder hashCodeBuilder) {
        super.hashCode(hashCodeBuilder);
        hashCodeBuilder.append(this.getID());
        hashCodeBuilder.append(this.getTimestamp());
        hashCodeBuilder.append(this.getSource());
    }

    public int hashCode() {
        final HashCodeBuilder hashCodeBuilder = new JAXBHashCodeBuilder();
        hashCode(hashCodeBuilder);
        return hashCodeBuilder.toHashCode();
    }

    public Object copyTo(Object target, CopyBuilder copyBuilder) {
        final LoggedMqttMessage copy = ((target == null)?((LoggedMqttMessage) createCopy()):((LoggedMqttMessage) target));
        super.copyTo(copy, copyBuilder);
        {
            int sourceID;
            sourceID = this.getID();
            int copyID = ((int) copyBuilder.copy(sourceID));
            copy.setID(copyID);
        }
        {
            long sourceTimestamp;
            sourceTimestamp = this.getTimestamp();
            long copyTimestamp = ((long) copyBuilder.copy(sourceTimestamp));
            copy.setTimestamp(copyTimestamp);
        }
        {
            Source sourceSource;
            sourceSource = this.getSource();
            Source copySource = ((Source) copyBuilder.copy(sourceSource));
            copy.setSource(copySource);
        }
        return copy;
    }

    public Object copyTo(Object target) {
        final CopyBuilder copyBuilder = new JAXBCopyBuilder();
        return copyTo(target, copyBuilder);
    }

    public Object createCopy() {
        return new LoggedMqttMessage();
    }

}
